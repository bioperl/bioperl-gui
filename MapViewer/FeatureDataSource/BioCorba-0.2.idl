

module GNOME {
  interface Unknown 
  {
    void ref();
    void unref();
    Object query_interface(in string repoid);
  };
};
 



module org {
  module biocorba {
    module seqcore 
    {

      exception RequestTooLarge { string reason; long suggested_size; }; 

      exception OutOfRange { string reason; };

      exception EndOfStream { };                   

      exception NeedsUpdate { string reason; };

      exception DoesNotExist { string reason; };

      exception UnableToProcess { string reason; }; 
 


      typedef sequence<string> StringList;
 
      typedef sequence<long> LongList;



      struct NameValueSet 
      {
	string name;

	StringList values;
      };
 
      typedef sequence<NameValueSet> NameValueSetList;
 


      interface SeqType 
      {
	const short PROTEIN = 0;
	const short DNA = 1;
	const short RNA = 2;

	const short UNKNOWN = -1;
      };
 

      interface AnonymousSeq : GNOME::Unknown 
      {
	short type(); 

	boolean is_circular();

	long length();

	string seq() 
	  raises (RequestTooLarge);

	string subseq(in long start,
		      in long end) 
	  raises (OutOfRange,
		  RequestTooLarge);
      };
 

      interface PrimarySeq : AnonymousSeq 
      {
	string display_id();

	string primary_id();        

	string accession_number();  
	
	long version();    
      };
 
      typedef sequence<PrimarySeq> PrimarySeqList;
 

      interface SeqFeatureVector;
 
      interface Seq : PrimarySeq 
      {
	SeqFeatureVector all_SeqFeatures(in boolean sub_seqfeatures);
	
	SeqFeatureVector get_SeqFeatures_by_type(in boolean sub_seqfeatures,
						 in string type);
	
	SeqFeatureVector get_SeqFeatures_in_region(in long start,
						   in long end, 
						   in boolean sub_seqfeatures) 
	  raises (OutOfRange);
	
	SeqFeatureVector get_SeqFeatures_in_region_by_type(in long start,
							   in long end, 
							   in boolean sub_seqfeatures,
							   in string type) 
	  raises (OutOfRange);
	
	PrimarySeq get_PrimarySeq(); 
      };  
 
      typedef sequence<Seq> SeqList;
 


      interface FuzzyTypeCode 
      {
	const short EXACT = 1;

	const short WITHIN = 2;

	const short BETWEEN = 3;

	const short BEFORE = 4;

	const short AFTER = 5;
      };
 

      struct SeqFeaturePosition
      {
	long position;
	
	long extension;

	short fuzzy;
      };
 

      struct SeqFeatureLocation 
      {
	SeqFeaturePosition start;

	SeqFeaturePosition end;

	short strand;          
      };
 
      typedef sequence<SeqFeatureLocation> SeqFeatureLocationList;

 
      interface SeqFeature : GNOME::Unknown 
      {
	string type();           

	string source();         

	string seq_primary_id(); 

	long start();            

	long end();              

	short strand();          

	NameValueSetList qualifiers(); 
	
	SeqFeatureVector sub_SeqFeatures();

	SeqFeatureLocationList locations()
	  raises (UnableToProcess);

	boolean PrimarySeq_is_available();  
	
	PrimarySeq get_PrimarySeq() 
	  raises (UnableToProcess); 
      };
 


      interface PrimarySeqIterator : GNOME::Unknown 
      {
	PrimarySeq next() 
	  raises (EndOfStream);

	boolean has_more(); 
      };
 

      interface SeqFeatureIterator : GNOME::Unknown 
      {
	SeqFeature next() 
	  raises (EndOfStream);

	boolean has_more();
      };
 


      interface PrimarySeqVector : GNOME::Unknown
      {
	long size();

	PrimarySeq elementAt(in long index)
	  raises (OutOfRange);

	PrimarySeqIterator iterator();
      };
 

      interface SeqFeatureVector : GNOME::Unknown
      {
	long size();

	SeqFeature elementAt(in long index)
	  raises (OutOfRange);

	SeqFeatureIterator iterator();
      };
 


      interface PrimarySeqDB : GNOME::Unknown 
      {
	string name();     

	long version(); 
	
	long max_sequence_length(); 

	PrimarySeq get_PrimarySeq(in string accession_number, 
				  in long version) 
	  raises (DoesNotExist);

	PrimarySeqVector get_PrimarySeqVector(); 
      };
 

      interface SeqDB : PrimarySeqDB 
      {
	Seq get_Seq(in string accession_number, 
		    in long version) 
	  raises (DoesNotExist); 

	StringList accession_numbers();
      };
 

      interface UpdateableSeqDB : SeqDB 
      {
	void write_Seq(in SeqList updatedSeqs, 
		       in SeqList addedSeqs,
		       in SeqList deadSeqs) 
	  raises (NeedsUpdate,
		  UnableToProcess, 
		  OutOfRange);
	
	void write_PrimarySeq(in PrimarySeqList updatedSeqs, 
			      in PrimarySeqList addedSeqs,
			      in PrimarySeqList deadSeqs) 
	  raises (NeedsUpdate, 
		  UnableToProcess, 
		  OutOfRange);
      };
 


      interface BioEnv 
      {
	PrimarySeqIterator get_PrimarySeqIterator_from_file(in string format,
							    in string filename) 
	  raises (UnableToProcess);

	PrimarySeq get_PrimarySeq_from_file(in string format,
					    in string filename) 
	  raises (UnableToProcess);
	
	Seq get_Seq_from_file(in string format,
			      in string filename)
	  raises (UnableToProcess);

	StringList get_SeqDB_names();

	LongList get_SeqDB_versions (in string name)
	  raises (DoesNotExist);

	SeqDB get_SeqDB_by_name(in string name,
				in long version)
	  raises (DoesNotExist);
      };    
    };
  };
}; 

