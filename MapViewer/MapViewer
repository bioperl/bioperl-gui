#!/usr/bin/perl

use strict;

use Carp;

use File::Basename;

use FindBin;

use lib $FindBin::Bin;

use Getopt::Long;

use Gtk;

use Pod::Usage;

use FeatureDataSource::FileFeatureDataSource;

use FeatureWidget;

use PaintDevice::GtkPaintDevice;
use PaintDevice::PSPaintDevice;
use PaintDevice::XFigPaintDevice;
use PaintDevice::PNGPaintDevice;

use PhysicalMapWidget;

use ExternalViewerLinker;

package MapInfo;

use strict;

sub new {
    my $class=shift;

    my $self={};
    $self->{name}='Unknown';
    $self->{anchor}=1;
    $self->{datasource}=undef;
    bless $self,$class;

    return $self;
}

sub get_name {
    my $self=shift;
    return $self->{name};
}

sub set_name {
    my $self=shift;
    $self->{name}=shift;
}

sub get_datasource {
    my $self=shift;
    return $self->{datasource};
}

sub set_datasource {
    my $self=shift;
    $self->{datasource}=shift;
}

sub get_anchor_position {
    my $self=shift;
    return $self->{anchor};
}

sub set_anchor_position {
    my $self=shift;
    $self->{anchor}=shift;
}


sub get_map_id {
    my $self=shift;
    return $self->{map_id};
}

sub set_map_id {
    my $self=shift;
    my $map_id=shift;
    $self->{map_id}=$map_id;
}

sub get_map {
    my $self=shift;
    return $self->{map};
}

sub set_map {
    my $self=shift;
    $self->{map}=shift;
}

package FeatureWindow;

use strict;

sub new {
    my $class=shift;
    my $manager=shift;
    my $self={};

    $self->{manager}=$manager;

    my $window=new Gtk::Window -toplevel;
    $window->set_usize(450,400);
    $window->set_title("Feature Qualifier Window");
    $self->{window}=$window;

    my $vbox=new Gtk::VBox(0,0);
    $vbox->show();
    $window->add($vbox);
    my $scrolledwindow=new Gtk::ScrolledWindow;
    $scrolledwindow->show();
    $vbox->pack_start($scrolledwindow,1,1,0);

    my $annotationtext=new Gtk::Text;
    $annotationtext->show();
    $annotationtext->set_word_wrap(1);
    $annotationtext->set_line_wrap(1);
    $scrolledwindow->add($annotationtext);
    $self->{annotationtext}=$annotationtext;

    bless $self,$class;

    return $self;
}

sub reactive_zone_entered {
    my $self=shift;
    my $feature=shift;

    my $textbuffer="Feature : ".$feature->primary_tag()."\n";
    $textbuffer.="Location : ".$feature->location->to_FTstring()."\n";
    foreach my $tag ($feature->all_tags()) {
	$textbuffer.="\t/$tag = ".join(' ',$feature->each_tag_value($tag))."\n";
    }
    $self->{annotationtext}->freeze();
    my $position=0;
    $self->{annotationtext}->delete_text(0,-1);
    $self->{annotationtext}->insert_text($textbuffer,0);
    $self->{annotationtext}->set_point(0);
    $self->{annotationtext}->thaw();
}


sub show_all {
    my $self=shift;

    $self->{window}->show_all;
}


package MicadoWindow;

use strict;

@MicadoWindow::ISA=qw(Gtk::Dialog);

sub new {
    my $class=shift;
    my $manager=shift;

    my $self=new Gtk::Dialog;
    $self->set_title('Micado Retrieval Window');
    $self->{manager}=$manager;

    my $genomecombo=new Gtk::Combo();
    my @genometab=FeatureDataSource::MicadoFeatureDataSource::get_complete_genome_names();
    $genomecombo->set_popdown_strings(@genometab);
    $genomecombo->entry->set_editable(0);
    $genomecombo->entry->signal_connect('changed',sub {$self->refresh_entry()});
    $genomecombo->show();
    $self->{genomecombo}=$genomecombo;
    $self->vbox->pack_start($genomecombo,1,1,1);

    my $accesshbox=new Gtk::HBox(0);
    $accesshbox->show();
    $self->vbox->pack_start($accesshbox,1,1,1);
    my $accesslabel=new Gtk::Label('Access Number');
    $accesslabel->show();
    $accesshbox->pack_start($accesslabel,1,1,1);
    my $accessentry=new Gtk::Entry;
    $accessentry->show();
    $self->{accessentry}=$accessentry;
    $accesshbox->pack_start($accessentry,1,1,1);


    my $okbtn=new Gtk::Button('OK');
    $okbtn->show();
    $okbtn->signal_connect('clicked',sub {$self->ok_clicked()});
    $self->action_area->pack_start($okbtn,1,1,1);
    my $cancelbtn=new Gtk::Button('Cancel');
    $cancelbtn->show();
    $cancelbtn->signal_connect('clicked',sub {$self->hide()});
    $self->action_area->pack_start($cancelbtn,1,1,1);

    bless $self,$class;

    return $self;
}


sub refresh_entry {
    my $self=shift;

    my $organism=$self->{genomecombo}->entry->get_text;
    my $accessnumber=FeatureDataSource::MicadoFeatureDataSource::get_access_number($organism);

    $self->{accessentry}->set_text($accessnumber);
}

sub ok_clicked {
    my $self=shift;
    
    $self->hide();

    my %args=(qualifiers=>1);

    my $accessnumber=$self->{accessentry}->get_text();
    if ($accessnumber =~ /\w{2}\d+/) {
	$args{accessnumber}=$accessnumber;
    } else {
	my $organism=$self->{genomecombo}->entry->get_text();
	$args{organism}=$organism;
    }
    $self->{manager}->add_map_from_micado(%args);
}


package EMBLWindow;

use strict;

@EMBLWindow::ISA=qw(Gtk::Dialog);

sub new {
    my $class=shift;
    my $manager=shift;

    my $self=new Gtk::Dialog;
    $self->set_title('EMBL Retrieval Window');
    $self->{manager}=$manager;

    my $accesshbox=new Gtk::HBox(0);
    $accesshbox->show();
    $self->vbox->pack_start($accesshbox,1,1,1);
    my $accesslabel=new Gtk::Label('Access Number');
    $accesslabel->show();
    $accesshbox->pack_start($accesslabel,1,1,1);
    my $accessentry=new Gtk::Entry;
    $accessentry->show();
    $self->{accessentry}=$accessentry;
    $accesshbox->pack_start($accessentry,1,1,1);


    my $okbtn=new Gtk::Button('OK');
    $okbtn->show();
    $okbtn->signal_connect('clicked',sub {$self->ok_clicked()});
    $self->action_area->pack_start($okbtn,1,1,1);
    my $cancelbtn=new Gtk::Button('Cancel');
    $cancelbtn->show();
    $cancelbtn->signal_connect('clicked',sub {$self->hide()});
    $self->action_area->pack_start($cancelbtn,1,1,1);

    bless $self,$class;

    return $self;
}


sub ok_clicked {
    my $self=shift;
    
    $self->hide();

    my %args=(qualifiers=>1);

    my $accessnumber=$self->{accessentry}->get_text();
    $args{accessnumber}=$accessnumber;

    $self->{manager}->add_map_from_embl(%args);
}



package GenBankWindow;

use strict;

@GenBankWindow::ISA=qw(Gtk::Dialog);

sub new {
    my $class=shift;
    my $manager=shift;

    my $self=new Gtk::Dialog;
    $self->set_title('GenBank Retrieval Window');
    $self->{manager}=$manager;

    my $accesshbox=new Gtk::HBox(0);
    $accesshbox->show();
    $self->vbox->pack_start($accesshbox,1,1,1);
    my $accesslabel=new Gtk::Label('Access Number');
    $accesslabel->show();
    $accesshbox->pack_start($accesslabel,1,1,1);
    my $accessentry=new Gtk::Entry;
    $accessentry->show();
    $self->{accessentry}=$accessentry;
    $accesshbox->pack_start($accessentry,1,1,1);


    my $okbtn=new Gtk::Button('OK');
    $okbtn->show();
    $okbtn->signal_connect('clicked',sub {$self->ok_clicked()});
    $self->action_area->pack_start($okbtn,1,1,1);
    my $cancelbtn=new Gtk::Button('Cancel');
    $cancelbtn->show();
    $cancelbtn->signal_connect('clicked',sub {$self->hide()});
    $self->action_area->pack_start($cancelbtn,1,1,1);

    bless $self,$class;

    return $self;
}


sub ok_clicked {
    my $self=shift;
    
    $self->hide();

    my %args=(qualifiers=>1);

    my $accessnumber=$self->{accessentry}->get_text();
    $args{accessnumber}=$accessnumber;

    $self->{manager}->add_map_from_genbank(%args);
}



package MapListWindow;

use strict;

sub new {
 
    my $class=shift;
    my $manager=shift;

    my $self={};
    bless $self,$class;

    $self->{manager}=$manager;

    my $window=new Gtk::Window -toplevel;
    $window->set_title('Map List');
    $window->set_usize(480,400);
    $window->signal_connect('delete_event',sub { Gtk::main_quit($window); });
    $window->signal_connect('destroy_event',sub { Gtk::main_quit($window); });
    $self->{window}=$window;

    my $vbox=new Gtk::VBox(0);
    $window->add($vbox);
    $vbox->show();

    my $maplistframe=new Gtk::Frame 'Map Operations';
    $maplistframe->show();
    $vbox->pack_start($maplistframe,1,1,4);

    my $maplistvbox=new Gtk::VBox(0);
    $maplistvbox->show();
    $maplistframe->add($maplistvbox);

    my $mapscrwindow=new Gtk::ScrolledWindow;
    $maplistvbox->pack_start($mapscrwindow,1,1,1);
    $mapscrwindow->show();
    
    my $maplist=new Gtk::List;
    $maplist->signal_connect('selection_changed',sub { $self->maplist_selection_changed();});
    $maplist->show();
    $mapscrwindow->add_with_viewport($maplist);
    $self->{maplist}=$maplist;
    my $hbox=new Gtk::HBox(0);
    $hbox->show();
    $maplistvbox->pack_start($hbox,0,0,1);
    
    my $mapfileselector=new Gtk::FileSelection('Map File Selection');
    $self->{mapfileselector}=$mapfileselector;
    $mapfileselector->ok_button->signal_connect('clicked',sub {$self->map_file_selected();});
    $mapfileselector->cancel_button->signal_connect('clicked',sub {$self->{mapfileselector}->hide();});

    my $mapaddhbox=new Gtk::HBox(0);
    $hbox->pack_start($mapaddhbox,1,1,1);

    my $mapdatasourcelabel=new Gtk::Label('Data Source:');
    $mapdatasourcelabel->show();
    $mapaddhbox->pack_start($mapdatasourcelabel,1,1,1);

    my $mapdatasourcemenu=new Gtk::Menu;
    $mapdatasourcemenu->show();
    my $mapdatasourceitem=new Gtk::MenuItem('Local File');
    $mapdatasourceitem->show();
    $mapdatasourceitem->signal_connect('activate',sub {$self->{datasourcetype}='Local File'});
    $mapdatasourcemenu->append($mapdatasourceitem);
    if ( eval {require FeatureDataSource::MicadoFeatureDataSource;} ) {
	my $micadowindow=new MicadoWindow($manager);
	$self->{micadowindow}=$micadowindow;
		$mapdatasourceitem=new Gtk::MenuItem('Micado');
	$mapdatasourceitem->show();
	$mapdatasourceitem->signal_connect('activate',sub {$self->{datasourcetype}='Micado'});
	$mapdatasourcemenu->append($mapdatasourceitem);
    }

    if ( eval {require FeatureDataSource::EMBLFeatureDataSource;} ) {
	my $emblwindow=new EMBLWindow($manager);
	$self->{emblwindow}=$emblwindow;
		$mapdatasourceitem=new Gtk::MenuItem('EMBL');
	$mapdatasourceitem->show();
	$mapdatasourceitem->signal_connect('activate',sub {$self->{datasourcetype}='EMBL'});
	$mapdatasourcemenu->append($mapdatasourceitem);
    }


    if ( eval {require FeatureDataSource::GenBankFeatureDataSource;} ) {
	my $genbankwindow=new GenBankWindow($manager);
	$self->{genbankwindow}=$genbankwindow;
		$mapdatasourceitem=new Gtk::MenuItem('GenBank');
	$mapdatasourceitem->show();
	$mapdatasourceitem->signal_connect('activate',sub {$self->{datasourcetype}='GenBank'});
	$mapdatasourcemenu->append($mapdatasourceitem);
    }

    my $mapdatasourceoptionmenu=new Gtk::OptionMenu();
    $mapdatasourceoptionmenu->set_menu($mapdatasourcemenu);
    $mapdatasourceoptionmenu->set_history(0);
    $self->{datasourcetype}='Local File';
    $mapdatasourceoptionmenu->show();
    $mapaddhbox->pack_start($mapdatasourceoptionmenu,1,1,1);

    my $mapaddbtn=new Gtk::Button('Add Map');
    $mapaddbtn->signal_connect('clicked',sub { $self->add_map_from_datasource(); });
    $mapaddbtn->show();
    $mapaddhbox->pack_start($mapaddbtn,1,1,1);
    $self->{mapaddbtn}=$mapaddbtn;

    my $mapremovebtn=new Gtk::Button('Remove Map');
    $mapremovebtn->set_sensitive(0);
    $mapremovebtn->signal_connect('clicked',sub { $self->remove_map; });
    $mapremovebtn->show();
    $hbox->pack_start($mapremovebtn,1,1,1);
    $self->{mapremovebtn}=$mapremovebtn;

    my $positionvbox=new Gtk::VBox(0,1);
    $maplistvbox->pack_start($positionvbox,1,1,1);

    my $anchorhbox=new Gtk::HBox(0,1);
    $anchorhbox->show();
    $positionvbox->pack_start($anchorhbox,1,1,1);

    my $anchorlabel=new Gtk::Label('Anchor Position');
    $anchorlabel->show();
    $anchorhbox->pack_start($anchorlabel,0,0,1);
    my $anchorentry=new Gtk::Entry;
    $anchorentry->show();
    $anchorentry->signal_connect('activate',sub {$self->anchor_changed;});
    $self->{anchorentry}=$anchorentry;
    $anchorhbox->pack_start($anchorentry,1,1,1);

    my $focushbox=new Gtk::HBox(0,1);
    $focushbox->show();
    $positionvbox->pack_start($focushbox,1,1,1);

    my $focuslabel=new Gtk::Label('Focus on gene');
    $focuslabel->show();
    $focushbox->pack_start($focuslabel,0,0,1);
    my $focusentry=new Gtk::Entry;
    $focusentry->show();
    $focusentry->signal_connect('activate',sub {$self->focus_changed;});
    $self->{focusentry}=$focusentry;
    $focushbox->pack_start($focusentry,1,1,1);

    my $companalframe=new Gtk::Frame 'Computational Result Operations';
    $companalframe->show();
    $vbox->pack_start($companalframe,1,1,4);

    my $companalvbox=new Gtk::VBox(0,1);
    $companalvbox->show();
    $companalframe->add($companalvbox);

    my $companalscrwindow=new Gtk::ScrolledWindow;
    $companalvbox->pack_start($companalscrwindow,1,1,1);
    $companalscrwindow->show();
    
    my $companallist=new Gtk::List;
    $companallist->show();
    $companallist->signal_connect('selection_changed',sub { $self->companallist_selection_changed();});
    $self->{companallist}=$companallist;
    $companalscrwindow->add_with_viewport($companallist);

    my $companalfileselector=new Gtk::FileSelection(' Comp. Results File Selection');
    $self->{companalfileselector}=$companalfileselector;
    $companalfileselector->ok_button->signal_connect('clicked',sub {$self->companal_file_selected();});
    $companalfileselector->cancel_button->signal_connect('clicked',sub {$self->{companalfileselector}->hide();});

    $hbox=new Gtk::HBox(0);
    $hbox->show();
    $companalvbox->pack_end($hbox,0,0,1);

    my $companaladdbtn=new Gtk::Button('Add Comp. Res.');
    $companaladdbtn->set_sensitive(0);
    $companaladdbtn->signal_connect('clicked',sub { $self->{companalfileselector}->show(); });
    $companaladdbtn->show();
    $hbox->pack_start($companaladdbtn,1,1,1);
    $self->{companaladdbtn}=$companaladdbtn;

    my $companalremovebtn=new Gtk::Button('Remove Comp. Res.');
    $companalremovebtn->set_sensitive(0);
    $companalremovebtn->signal_connect('clicked',sub { $self->remove_companal; });
    $companalremovebtn->show();
    $hbox->pack_end($companalremovebtn,1,1,1);
    $self->{companalremovebtn}=$companalremovebtn;
    

    return $self;
}

sub add_map_from_datasource {
    my $self=shift;

    $self->{mapfileselector}->show()
	if ($self->{datasourcetype} eq 'Local File');
    $self->{micadowindow}->show()
	if ($self->{datasourcetype} eq 'Micado');
    $self->{emblwindow}->show()
	if ($self->{datasourcetype} eq 'EMBL');
    $self->{genbankwindow}->show()
	if ($self->{datasourcetype} eq 'GenBank');
}

sub add_map {
    my $self=shift;
    my $mapinfo=shift;

    my $maplist=$self->{maplist};

    my $item=new Gtk::ListItem $mapinfo->get_name;
    $item->show();
    $maplist->append_items($item);
    $maplist->select_child($item);
    my $datasource=$mapinfo->get_datasource();
    $self->{mapfileselector}->set_filename($datasource->get_filename())
	if ($datasource->isa('FeatureDataSource::FileFeatureDataSource'));

}

sub remove_map {
    my $self=shift;

    my $listitem=$self->{maplist}->selection;

    my $mapname=$listitem->children->get;

    $self->{manager}->remove_map($mapname);

    $self->{maplist}->unselect_item($listitem);
    $self->{maplist}->remove_items($listitem);
}

sub maplist_selection_changed {
    my $self=shift;

    my $widget=$self->{maplist}->selection();
    if (!defined $widget) {
	$self->{companallist}->set_sensitive(0);
	$self->{mapremovebtn}->set_sensitive(0);
	$self->{anchorentry}->delete_text(0,-1);
	$self->{anchorentry}->set_sensitive(0);
	$self->{focusentry}->delete_text(0,-1);
	$self->{focusentry}->set_sensitive(0);
    } else {
	$self->{companallist}->set_sensitive(1);
	$self->{anchorentry}->set_sensitive(1);
	$self->{focusentry}->set_sensitive(1);
	my $mapname=$widget->children->get;
	my $anchor=$self->{manager}->get_anchor_position('NAME'=>$mapname);
	$self->{anchorentry}->insert_text($anchor,0);
	my @children=$self->{maplist}->children;
	$self->{mapremovebtn}->set_sensitive(1)
	    if ($#children>0);
    }
    $self->refresh_companal_widgets($widget);
}

sub map_file_selected {
    my $self=shift;

    my $file=$self->{mapfileselector}->get_filename();
    $self->{mapfileselector}->hide();
    $self->{manager}->add_map_from_file($file);
}


sub anchor_changed {
    my $self=shift;

    my $mapname=$self->{maplist}->selection->children->get;
    my $newanchor=$self->{anchorentry}->get_text();
    if (!($newanchor =~ /-?\d+/) || $newanchor==0) {
	my $oldanchor=$self->{manager}->get_anchor_position('NAME'=>$mapname);
	$self->{anchorentry}->delete_text(0,-1);
	$self->{anchorentry}->insert_text($oldanchor,0);
    } else {
	$self->{focusentry}->delete_text(0,-1);
	$self->{manager}->set_anchor_position('NAME'=>$mapname,$newanchor);
    }
}

sub focus_changed {
    my $self=shift;

    my $mapname=$self->{maplist}->selection->children->get;
    my $genename=$self->{focusentry}->get_text();

    my $start=$self->{manager}->set_gene_focus('NAME'=>$mapname,$genename);
    if ($start>0) {
	$self->{anchorentry}->delete_text(0,-1);
	$self->{anchorentry}->insert_text($start,0);
    } else {
	$self->{focusentry}->delete_text(0,-1);
    }
}


sub refresh_companal_widgets {
    my $self=shift;
    my $widget=shift;

    my @companalwidgets=$self->{companallist}->children();
    $self->{companallist}->clear_items(0,$#companalwidgets);
    foreach my $companalwidget (@companalwidgets) {
	$companalwidget->destroy();
    }
    if (!defined $widget) {
	$self->{companallist}->set_sensitive(0);
	$self->{companaladdbtn}->set_sensitive(0);
	$self->{companalremovebtn}->set_sensitive(0);
    } else {
	$self->{companallist}->set_sensitive(1);
	$self->{companaladdbtn}->set_sensitive(1);
	my @children=$widget->children;
	if (defined $children[0]) {
	    my @companalnames=$self->{manager}->get_companal_names($children[0]->get);
	    my $lastitem;
	    foreach my $companalname (@companalnames) {
		my $item = new Gtk::ListItem $companalname;
		$item->show();
		$self->{companallist}->append_items($item);
		$lastitem=$item;
	    }
	    $self->{companallist}->select_child($lastitem)
		if (defined $lastitem);
	}
    }
}


sub companallist_selection_changed {
    my $self=shift;

    my $widget=$self->{companallist}->selection();
    if (!defined $widget) {
	$self->{companalremovebtn}->set_sensitive(0);
    } else {
	my @children=$self->{companallist}->children;
	$self->{companalremovebtn}->set_sensitive(1)
	    if ($#children >= 0);
    }
}

sub companal_file_selected {
    my $self=shift;

    my $file=$self->{companalfileselector}->get_filename();

    my $listitem=$self->{maplist}->selection;
    
    my $mapname=$listitem->children->get;    

    $self->{companalfileselector}->hide();
    $self->{manager}->add_companal_from_file($mapname,$file);

    my @children=$self->{companallist}->children;
    foreach my $widget (@children) {
	$self->{companallist}->remove($widget);
	$widget->destroy();
    }

    my @companalnames=$self->{manager}->get_companal_names($mapname);
    my $lastitem=undef;
    foreach my $name (@companalnames) {
	my $item=new Gtk::ListItem $name;
	$item->show();
	$self->{companallist}->append_items($item);	
	$lastitem=$item;
    }
    $self->{companallist}->select_child($lastitem)
	if (defined $lastitem);
}

sub remove_companal {
    my $self=shift;

    my $widget=$self->{companallist}->selection();
    my $companalname=$widget->children->get();
    my $mapname=$self->{maplist}->selection->children->get();

    $self->{manager}->remove_companal_result($mapname,$companalname);

    $self->refresh_companal_widgets($self->{maplist}->selection());
}

sub show_all {
    my $self=shift;

    $self->{window}->show_all();
  Gtk::main($self->{window});
}

package MapDrawingWindow;

use strict;


use PreferencesHandler;


my $MINBPL=50;

my $prefsfile=undef;

BEGIN {

    $prefsfile="$ENV{'HOME'}/.mapviewerrc"
	if (-r "$ENV{'HOME'}/.mapviewerrc");
    
    $prefsfile=".mapviewerrc"
	if (-r ".mapviewerrc");

    PreferencesHandler::load_preferences($prefsfile)
      if (defined $prefsfile);

}

sub new {
     my $class=shift;
     my $manager=shift;

     my $self={};
     bless $self,$class;

     $self->{manager}=$manager;

     $self->{mapids}=();
     $self->{strands_expanded}=0;
     $self->{startposition}=1;
     $self->{nlines}=4;
     $self->{bpl}=5000;
     
     my $window=new Gtk::Window -toplevel;
     $window->set_usize(800,600);
     $window->signal_connect('delete_event',sub { Gtk::main_quit($window); });
     $window->signal_connect('destroy_event',sub { Gtk::main_quit($window); });
     
     $self->{window}=$window;

     my $vbox=new Gtk::VBox(0,1);
     $vbox->show_all();
     $window->add($vbox);
     
     my $menubar=new Gtk::MenuBar;
     $vbox->pack_start($menubar,0,0,1);
     $self->{menubar}=$menubar;

     my $menuitem=new Gtk::MenuItem('File');
     $menubar->append($menuitem);
     my $submenu=new Gtk::Menu;
     $menuitem->set_submenu($submenu);
     $menuitem= new Gtk::MenuItem("Export Map");
     $submenu->append($menuitem);
     my $subsubmenu=new Gtk::Menu;
     $menuitem->set_submenu($subsubmenu);
     $menuitem = new Gtk::MenuItem("XFig");
     $menuitem->signal_connect("activate"=>sub{$self->_export_map('fig')});
     $subsubmenu->append($menuitem);
     $menuitem = new Gtk::MenuItem("PostScript");
     $menuitem->signal_connect("activate"=>sub{$self->_export_map('ps')});
     $subsubmenu->append($menuitem);     
     $menuitem = new Gtk::MenuItem("PNG");
     $menuitem->signal_connect("activate"=>sub{$self->_export_map('png')});
     $subsubmenu->append($menuitem);     
     $menuitem=new Gtk::MenuItem('Quit');
     $menuitem->signal_connect('activate'=>sub{Gtk::main_quit($self->{window});});
     $submenu->append($menuitem);

     $menuitem=new Gtk::MenuItem('Preferences');
     $menubar->append($menuitem);
     $submenu=new Gtk::Menu;
     $menuitem->set_submenu($submenu);
     $menuitem=new Gtk::CheckMenuItem('Expand Strands');
     if (!ScalableFeatureWidget::are_strands_collapsed) {
	 $menuitem->set_active(1);
	 $self->{strands_expanded}=1;
     }
     $menuitem->signal_connect('toggled'=>sub{$self->_change_strand_state;});
     $submenu->append($menuitem);
     $menuitem=new Gtk::CheckMenuItem('Show Frames');
     if (ScalableFeatureWidget::are_frames_visible) {
	 $menuitem->set_active(1);
	 $self->{frames_visible}=1;
     }
     $menuitem->signal_connect('toggled'=>sub{$self->_change_frame_state;});
     $submenu->append($menuitem);
     $menuitem=new Gtk::MenuItem('Visible Features');
     $submenu->append($menuitem);
     $self->{featureitem}=$menuitem;
     $menuitem=new Gtk::MenuItem('Save Preferences');
     $menuitem->signal_connect('activate'=>sub{$self->_save_preferences;});
     $submenu->append($menuitem);

     my $frame=new Gtk::Frame;
     $vbox->pack_start($frame,1,1,1);

     my $paintdevice=new PaintDevice::GtkPaintDevice(800,600,$frame);
     $self->{paintdevice}=$paintdevice;

     my $mapwidget=new PhysicalMapWidget($paintdevice);
     $self->{mapwidget}=$mapwidget;

     my $hbox=new Gtk::HBox(0,1);
     $hbox->show();
     $vbox->pack_start($hbox,0,0,1);

     my $arrowbox=new Gtk::HBox(0,0);
     my $alignment=new Gtk::Alignment(1.0,0.5,0.0,1.0);
     $arrowbox->add($alignment);
     my $arrow=new Gtk::Arrow('left','out');
     $alignment->add($arrow);
     $alignment=new Gtk::Alignment(0.0,0.5,0.0,1.0);
     $arrowbox->add($alignment);
     $arrow=new Gtk::Arrow('left','out');
     $alignment->add($arrow);

     my $prevbtn=new Gtk::Button;
     $prevbtn->add($arrowbox);
     $prevbtn->show();
     $prevbtn->signal_connect('clicked',sub {$self->_move_btn_clicked(-1);});
     $hbox->pack_start($prevbtn,1,1,0);

     $arrow=new Gtk::Arrow('left','out');
     $prevbtn=new Gtk::Button;
     $prevbtn->add($arrow);
     $prevbtn->show();
     $prevbtn->signal_connect('clicked',sub {$self->_move_btn_clicked(-0.5);});
     $hbox->pack_start($prevbtn,1,1,2);

     $arrow=new Gtk::Arrow('right','out');
     my  $nextbtn=new Gtk::Button;
     $nextbtn->add($arrow);
     $nextbtn->show();
     $nextbtn->signal_connect('clicked',sub {$self->_move_btn_clicked(0.5);});
     $hbox->pack_start($nextbtn,1,1,1);

     $arrowbox=new Gtk::HBox(0,0);
     $alignment=new Gtk::Alignment(1.0,0.5,0.0,1.0);
     $arrowbox->add($alignment);
     $arrow=new Gtk::Arrow('right','out');
     $alignment->add($arrow);
     $alignment=new Gtk::Alignment(0.0,0.5,0.0,1.0);
     $arrowbox->add($alignment);
     $arrow=new Gtk::Arrow('right','out');
     $alignment->add($arrow);

     $nextbtn=new Gtk::Button;
     $nextbtn->add($arrowbox);
     $nextbtn->show();
     $nextbtn->signal_connect('clicked',sub {$self->_move_btn_clicked(1);});
     $hbox->pack_start($nextbtn,1,1,1);

     $hbox=new Gtk::HBox(0,4);
     $hbox->show();
     $vbox->pack_start($hbox,0,0,1);

     my $label=new Gtk::Label('Start base');
     $hbox->pack_start($label,0,1,1);
     my $entry=new Gtk::Entry(9);
     $hbox->pack_start($entry,1,1,1);
     $entry->signal_connect('activate',sub {$self->_map_entry_changed();});
     $entry->set_text($self->{startposition});
     $self->{startentry}=$entry;
     $label=new Gtk::Label('Lines');
     $hbox->pack_start($label,0,1,1);
     $entry=new Gtk::Entry(9);
     $entry->signal_connect('activate',sub {$self->_map_entry_changed();});
     $hbox->pack_start($entry,1,1,1);
     $entry->set_text($self->{nlines});
     $self->{linesentry}=$entry;
     $label=new Gtk::Label('BPL');
     $hbox->pack_start($label,0,1,1);
     $entry=new Gtk::Entry(9);
     $entry->signal_connect('activate',sub {$self->_map_entry_changed();});
     $hbox->pack_start($entry,1,1,1);
     $entry->set_text($self->{bpl});
     $self->{bplentry}=$entry;

     $vbox=new Gtk::VBox(0,2);
     $hbox->pack_start($vbox,0,1,1);

     $hbox=new Gtk::HBox(0,2);
     $vbox->pack_start($hbox,0,1,1);
     $label=new Gtk::Label('Name display thresh.');
     $hbox->pack_start($label,0,1,1);
     my $namethreshadj=new Gtk::Adjustment($ScalableFeatureWidget::display_threshold,
					   0.0,1.01,0.05,0.05,0.01);
     $namethreshadj->signal_connect('value_changed',sub {$self->_map_entry_changed();});
     $self->{namethreshadj}=$namethreshadj;
     my $scale=new Gtk::HScale($namethreshadj);
     $scale->set_update_policy('delayed');
     $scale->set_draw_value(1);
     $scale->set_digits(2);
     $hbox->pack_start($scale,1,1,1);

     $hbox=new Gtk::HBox(0,2);
     $vbox->pack_start($hbox,0,1,1);
     $label=new Gtk::Label('Seq. display thresh.');
     $hbox->pack_start($label,0,1,1);
     my $seqthreshadj=new Gtk::Adjustment(100,1,1001,100,10,1);
     $seqthreshadj->signal_connect('value_changed',sub {$self->_map_entry_changed();});
     $self->{seqthreshadj}=$seqthreshadj;
     $scale=new Gtk::HScale($seqthreshadj);
     $scale->set_update_policy('delayed');
     $scale->set_draw_value(1);
     $scale->set_digits(2);
     $hbox->pack_start($scale,1,1,1);
     

     return $self;
}

sub append_map {
    my $self=shift;
    my $map=shift;

    my $start=$self->{startposition};
    my $nlines=$self->{nlines};
    my $bpl=$self->{bpl};
    my $end=$start+$nlines*$bpl-1;

    my $mapid=$self->{mapwidget}->append_map($map,$start,$end,$bpl);

    push @{$self->{mapids}},$mapid;

    $self->{mapwidget}->render();

    $self->_rebuild_feature_menu;

    return $mapid;
}


sub remove_map {
    my $self=shift;
    my $delmapid=shift;

    my $newmapids=[];
    foreach my $mapid (@{$self->{mapids}}) {
	push @{$newmapids},$mapid
	    if ($mapid != $delmapid);
    }

    $self->{mapids}=$newmapids;
    $self->{mapwidget}->remove_map($delmapid);
    $self->{mapwidget}->render();
}

sub render {
    my $self=shift;
    $self->{mapwidget}->render();
}


sub add_listener {
    my $self=shift;
    my $listener=shift;
    my $type=shift;

    $self->{paintdevice}->add_listener($listener,$type);
}

sub show_all {
    my $self=shift;
    $self->{window}->show_all();
}

sub get_start_position {
    my $self=shift;
    return $self->{startposition};
}

sub set_start_position {
    my $self=shift;
    my $start=shift;

    $self->{startposition}=$start;
    $self->{startentry}->set_text($start);

    $self->update_map_display;
}

sub update_map_display {
    my $self=shift;

    my $start=$self->{startposition};
    my $nlines=$self->{nlines};
    my $bpl=$self->{bpl};

    if ($start==0) {
	$start++;
	$self->{startposition}=$start;
	$self->{startentry}->set_text($start);
    }
    if ($start+$nlines*$bpl-1==0) {
	$start--;
	$self->{startposition}=$start;
	$self->{startentry}->set_text($start);
	
    }
    
    foreach my $mapid (@{$self->{mapids}}) {
	my $anchor=$self->{manager}->get_anchor_position('ID'=>$mapid);
	my $mapstart=$start+$anchor-1;
	my $mapend=$mapstart+$nlines*$bpl-1;
	$self->{mapwidget}->set_view_range($mapid,$mapstart,$mapend,$bpl);
    }
    $self->{mapwidget}->render();
}

sub _move_btn_clicked {
    my $self=shift;
    my $direction=shift;

    my $start=$self->{startposition};
    my $nlines=$self->{nlines};
    my $bpl=$self->{bpl};
    my $newstart=$start+$direction*$bpl*$nlines;
    $self->{startposition}=$newstart;
    $self->update_map_display;
    $newstart=$self->{startposition};
    $self->{startentry}->set_text($newstart);

		       
}

sub _rebuild_feature_menu {
    my $self=shift;

    my @featurenames=FeatureWidgetFactory::get_feature_names();

    if (defined $self->{featuremenu}) {
	$self->{featureitem}->remove_submenu();
	$self->{featuremenu}->destroy();
    }

    $self->{featuremenu}=new Gtk::Menu;

    foreach my $name (@featurenames) {
	my $item= new Gtk::CheckMenuItem($name);
	if (FeatureWidgetFactory::is_masked($name)) {
	    $item->set_active(0);
	} else {
	    $item->set_active(1);
	}
	$item->signal_connect("toggled"=>sub{$self->_toggle_feature_mask($name);});
	$self->{featuremenu}->append($item);
    }
    
    $self->{featureitem}->set_submenu($self->{featuremenu});
    $self->{menubar}->show_all();
}


sub _toggle_feature_mask {
    my $self=shift;
    my $name=shift;
    
    if (FeatureWidgetFactory::is_masked($name)) {
      FeatureWidgetFactory::unmask_feature($name);
    } else {
      FeatureWidgetFactory::mask_feature($name);
    }
    $self->{mapwidget}->render;
}

sub _change_strand_state {
    my $self=shift;

    if ($self->{strands_expanded}) {
      ScalableFeatureWidget::collapse_strands();
	$self->{strands_expanded}=0;
    } else {
      ScalableFeatureWidget::expand_strands();
	$self->{strands_expanded}=1;
    }
    $self->{mapwidget}->render;
}

sub _change_frame_state {
    my $self=shift;

    if ($self->{frames_visible}) {
      ScalableFeatureWidget::hide_frames();
	$self->{frames_visible}=0;
    } else {
      ScalableFeatureWidget::show_frames();
	$self->{frames_visible}=1;
    }
    $self->{mapwidget}->render;
}

sub _export_map {
    my $self=shift;
    my $format = shift;

    my $dialog = new Gtk::FileSelection("Export Map");
    $dialog->set_filename("map.$format");
    $dialog->ok_button->signal_connect("clicked",sub {$self->_write_map_file($dialog,$format)});
    $dialog->ok_button->signal_connect("clicked",sub {$dialog->destroy});
    $dialog->cancel_button->signal_connect("clicked",sub {$dialog->destroy});
    
    $dialog->show();
}

sub _write_map_file {
    my $self=shift;
    my $dialog = shift;
    my $format = shift;

    my $filename=$dialog->get_filename;
    my $filepaintdevice;
    my $oldpaintdevice=$self->{mapwidget}->get_paintdevice;


    $filepaintdevice=new PaintDevice::PSPaintDevice($filename,18,25) 
	if ($format eq 'ps');
    $filepaintdevice=new PaintDevice::XFigPaintDevice($filename,18,10) 
	if ($format eq 'fig');
    my $factor=PaintDevice::PNGPaintDevice->text_height/$oldpaintdevice->text_height;
    $filepaintdevice=new PaintDevice::PNGPaintDevice($filename,$oldpaintdevice->width,int($oldpaintdevice->height*$factor))
	if ($format eq 'png');

    $oldpaintdevice->copy_colormap($filepaintdevice);
    $self->{mapwidget}->set_paintdevice($filepaintdevice);
    $self->{mapwidget}->render;

    $self->{mapwidget}->set_paintdevice($oldpaintdevice);
}

sub _map_entry_changed {
    my $self=shift;

    my $do_update=0;

    my $newstart=$self->{startentry}->get_text();
    if ( !($newstart =~ /-?\d+/) || $newstart==0) {
	$self->{startentry}->set_text($self->{startposition});
    } else {
	$self->{startposition}=$newstart;
	$do_update=1;
    }
    my $newnlines=$self->{linesentry}->get_text();
    if ($newnlines =~ /\D/ || $newnlines < 1) {
	$self->{linesentry}->set_text($self->{nlines});
    } else {
	$self->{nlines}=$newnlines;
	$do_update=1;
    }
    my $newbpl=$self->{bplentry}->get_text();
    if ($newbpl =~ /\D/ || $newbpl < $MINBPL) {
	$self->{bplentry}->set_text($self->{bpl});
    } else {
	$self->{bpl}=$newbpl;
	$do_update=1;
    }

    my $oldthresh=$ScalableFeatureWidget::display_threshold;
    my $newthresh=$self->{namethreshadj}->value;
    if ($newthresh != $oldthresh) {
	$ScalableFeatureWidget::display_threshold=$newthresh;
	$do_update=1;
    }

    my $oldseqthresh=$self->{mapwidget}->get_sequence_display_threshold();
    my $newseqthresh=$self->{seqthreshadj}->value();
    if ($newseqthresh != $oldseqthresh) {
	$self->{mapwidget}->set_sequence_display_threshold($newseqthresh);
	$do_update=1;
    }

    $self->update_map_display
	if ($do_update);
}

sub _save_preferences {
    my $self=shift;

    $prefsfile="$ENV{'HOME'}/.mapviewerrc"
	if (!defined $prefsfile);

  PreferencesHandler::save_preferences($prefsfile);
    
}

package MapManager;

use Carp;

use strict;


sub new {
   croak 'usage: $mgr=new MapManager;'
	if (@_ != 1);

   my $class=shift;

   my $self={};

   $self->{mapinfos}=[];
   $self->{drawingwindow}=new MapDrawingWindow($self);
   $self->{featurewindow}=new FeatureWindow($self);
   $self->{drawingwindow}->add_listener($self->{featurewindow},'ENTER');
   $self->{externalviewerlinker}=new ExternalViewerLinker;
   $self->{drawingwindow}->add_listener($self->{externalviewerlinker},'SELECT');
   $self->{listwindow}=new MapListWindow($self);
   bless $self,$class;

   return $self;
}


sub _add_map {
    my $self=shift;
    my $datasource=shift;

    my $map=new PhysicalMap($datasource);

    my $basename=$map->get_organism;
    my $chromosome=$map->get_chromosome;
    $basename.=" - Chr. $chromosome"
	if (defined $chromosome);
    my $nameok=0;
    my $mapname=$basename;
    while (!$nameok) {
	$nameok=1;
	foreach my $mapinfo (@{$self->{mapinfos}}) {
	    $nameok=0
		if ($mapname eq $mapinfo->get_name);
	}
	if (!$nameok) {
	    my $mapcounter=2;
	    if ($mapname =~ /\s\[(\d+)\]$/) {
		$mapcounter=$1+1;
	    }
	    $mapname=$basename." [$mapcounter]";
	}
    }
	
    my $mapinfo=new MapInfo;
    $mapinfo->set_name($mapname);
    $mapinfo->set_datasource($datasource);
    $mapinfo->set_map($map);
    $mapinfo->set_anchor_position(1);

    $self->{listwindow}->add_map($mapinfo);
    my $map_id=$self->{drawingwindow}->append_map($map);

    $mapinfo->set_map_id($map_id);
    push @{$self->{mapinfos}},$mapinfo;
}

sub add_map_from_file {
    my $self=shift;
    my $filename=shift;

    my $datasource=new FeatureDataSource::FileFeatureDataSource($filename,'GenBank');

    $self->_add_map($datasource);

}


sub add_map_from_micado {
    my $self=shift;

    my %args=();
    while (@_) {
	my $key=shift;
	my $value=shift;
        $args{$key}=$value;
    }

    my $datasource=new FeatureDataSource::MicadoFeatureDataSource(%args);

    $self->_add_map($datasource);
}


sub add_map_from_embl {
    my $self=shift;

    my %args=();
    while (@_) {
	my $key=shift;
	my $value=shift;
        $args{$key}=$value;
    }

    my $datasource=new FeatureDataSource::EMBLFeatureDataSource(%args);

    $self->_add_map($datasource);
}

sub add_map_from_genbank {
    my $self=shift;

    my %args=();
    while (@_) {
	my $key=shift;
	my $value=shift;
        $args{$key}=$value;
    }

    my $datasource=new FeatureDataSource::GenBankFeatureDataSource(%args);

    $self->_add_map($datasource);
}

sub remove_map {
    my $self=shift;

    my $mapname=shift;

    my $newmapinfos=[];

    foreach my $mapinfo (@{$self->{mapinfos}}) {
	if ($mapinfo->get_name eq $mapname) {
	    my $mapid=$mapinfo->get_map_id;
	    $self->{drawingwindow}->remove_map($mapid);
	} else {
	    push @{$newmapinfos},$mapinfo;
	}
    }

    $self->{mapinfos}=$newmapinfos;

}

sub add_companal_from_file {
    my $self=shift;
    my $mapname=shift;
    my $file=shift;

     foreach my $mapinfo (@{$self->{mapinfos}}) {
	 if ($mapinfo->get_name eq $mapname) {
	     my $map=$mapinfo->get_map;
	     $map->load_companal_results($file);
	 }
     }
    $self->{drawingwindow}->render;
}


sub remove_map {
    my $self=shift;

    my $mapname=shift;

    my $newmapinfos=[];

    foreach my $mapinfo (@{$self->{mapinfos}}) {
	if ($mapinfo->get_name eq $mapname) {
	    my $mapid=$mapinfo->get_map_id;
	    $self->{drawingwindow}->remove_map($mapid);
	} else {
	    push @{$newmapinfos},$mapinfo;
	}
    }

    $self->{mapinfos}=$newmapinfos;

}

sub get_companal_names {
    my $self=shift;
    my $mapname=shift;

    my @res=();

    foreach my $mapinfo (@{$self->{mapinfos}}) {
	if ($mapinfo->get_name eq $mapname) {
	    my $map=$mapinfo->get_map;
	    @res=$map->get_companal_result_types;
	}
    }

    return @res;
}


sub remove_companal_result {
    my $self=shift;
    my $mapname=shift;
    my $resulttype=shift;

    foreach my $mapinfo (@{$self->{mapinfos}}) {
	if ($mapinfo->get_name eq $mapname) {
	    my $map=$mapinfo->get_map;
	    $map->remove_companal_result_type($resulttype);
	} 
    }
    $self->{drawingwindow}->render;
}

sub get_anchor_position {
    my $self=shift;
    my %args=();
    my $key=uc shift;
    my $value=shift;
    $args{$key}=$value;

    my $mapname=shift;
    my $anchorposition=1;

    foreach my $mapinfo (@{$self->{mapinfos}}) {
	    if ((defined $args{'NAME'} && 
		 $mapinfo->get_name eq $args{'NAME'}) ||
		(defined $args{'ID'} &&
		 $mapinfo->get_map_id == $args{'ID'})) {
		$anchorposition=$mapinfo->get_anchor_position;
	    }

    }
    return $anchorposition;

}

sub set_anchor_position {
    my $self=shift;
    my %args={};
    my $key=shift;
    my $value=shift;
    $args{$key}=$value;
        my $newanchor=shift;

    foreach my $mapinfo (@{$self->{mapinfos}}) {
	if ((defined $args{'NAME'} && $mapinfo->get_name eq $args{'NAME'}) ||
	    (defined $args{'ID'} && $mapinfo->get_id == $args{'ID'})) {
	    $mapinfo->set_anchor_position($newanchor);
	}
    }
    $self->{drawingwindow}->update_map_display();
}

sub set_gene_focus {
    my $self=shift;
    my %args={};
    my $key=shift;
    my $value=shift;
    $args{$key}=$value;
        my $genename=shift;

    my ($start,$end)=(-1,-1);
    foreach my $mapinfo (@{$self->{mapinfos}}) {
	if ((defined $args{'NAME'} && $mapinfo->get_name eq $args{'NAME'}) ||
	    (defined $args{'ID'} && $mapinfo->get_id == $args{'ID'})) {
	    my $map=$mapinfo->get_map;
	    ($start,$end)=$map->get_feature_location('gene',$genename);
	    if ($start>0) {
		$mapinfo->set_anchor_position($start);
		$self->{drawingwindow}->set_start_position(1);
	    }
	}
    }
    return $start;
}

sub run {
    my $self=shift;
    
    $self->{drawingwindow}->show_all();
    $self->{featurewindow}->show_all();
    $self->{listwindow}->show_all();
}

package main;

use strict;

# Default range parameters for map display.
my ($first,$last,$step)=(1,20000,5000);

my $help= 0;

GetOptions('help|?' => \$help,
	   'first=i' => \$first,
	   'last=i' => \$last,
	   'step=i' => \$step);

pod2usage(1) if $help;
#pod2usage("$0: Missing argument : GenBank data file.\n")
#    if (@ARGV<1);

Gtk::init('dummy');

my $manager=new MapManager();

my $filename=shift;
$manager->add_map_from_file($filename)
    if (defined $filename);

$manager->run();

__END__

=head1 MapViewer

Basic physical map viewer.

=head1 SYNOPSIS

MapViewer [options] mapfile [compfile_1 compfile_2 ...]

=head1 ARGUMENTS

=over

=item B<mapfile> 

GenBank file containing sequence and features.

=item B<compfile_n>

File containing computational results to be displayed on top of physical map.

=back


=head1 OPTIONS

=over

=item B<-help|-h|-?>

Display help message.

=item B<-first|-f n>

Map display will start at base position B<n> (default value 1)

=item B<-last|-l m>

Map display will end at base position B<m> (default value 20000).

=item B<-step|-s k>

Map display will have B<k> bases per display line (default value 5000).

=back

=cut
