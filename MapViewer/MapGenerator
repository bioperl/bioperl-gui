#!/usr/bin/perl

use strict;

use Carp;

use File::Basename;

use FindBin;

use lib $FindBin::Bin;

use Getopt::Long;

use Pod::Usage;

use FeatureWidget;
use PaintDevice::ImageMapPaintDevice;
use PreferencesHandler;
use PhysicalMapWidget;


# Default range parameters for map display.
my ($first,$last,$step)=(-1,-1,-1);
my ($accessnumber,$gbkfile)=(undef,undef);
my $outputformat='PNG';
my ($width,$height)=(undef,undef);
my $urlprefix='http://localhost/';
my $prefsfile=undef;
my $companalresfile=undef;

my $help= 0;

GetOptions('help|h' => \$help,
	   'accessnumber|a=s' => \$accessnumber,
	   'gbkfile|g=s' => \$gbkfile,
	   'first|f=i' => \$first,
	   'last|l=i' => \$last,
	   'step|s=i' => \$step,
	   'outputformat|o=s' => \$outputformat,
	   'companalresfile|c=s' => \$companalresfile,
	   'width|w=i' => \$width,
	   'urlprefix|u=s' => \$urlprefix,
           'prefsfile|p=s' => \$prefsfile); 

pod2usage(1) if $help;
die "$0 : Missing argument(s)."
    if (@ARGV<1);
die "$0 : one and only one of --accessnumber or --gkbfile must be specified"
    if ((defined($accessnumber) && defined($gbkfile)) ||
	(!defined($accessnumber) && !defined($gbkfile)));

my $mapfilename=shift;

PreferencesHandler::load_preferences($prefsfile)
    if (defined $prefsfile);

my $datasource=undef;

if (defined $accessnumber) {
    eval { require FeatureDataSource::MicadoFeatureDataSource;};
    my %args=(accessnumber=>$accessnumber);
    if ($first>0 && $last>$first) {
	$args{start}=$first;
	$args{end}=$last;
    }
    $datasource=new FeatureDataSource::MicadoFeatureDataSource(%args);
}

if (defined $gbkfile) {
    eval { require FeatureDataSource::FileFeatureDataSource; };
    $datasource=new FeatureDataSource::FileFeatureDataSource($gbkfile,'GenBank');
}

my $map=new PhysicalMap($datasource);

if ($first<0 && $last<0) {
   ($first,$last)=$map->get_bounds();
}

$first=1
    if ($first<0);

if ($last<0) {
    (my $dummy,$last)=$map->get_bounds();
}

$step=($last-$first)+1
    if ($step<0);

if ($step>($last-$first+1)) {
    $step=$last-$first+1;
}

$last=$last+$step
    unless ($last%$step==0);

my $device=undef;


if (uc $outputformat eq 'PNG' || uc $outputformat eq 'IMAP') {
    $height=1;
    $width=640 unless
	($width>0);

    if (uc $outputformat eq 'PNG') {
	eval { require PaintDevice::PNGPaintDevive; };
	$device=new PaintDevice::PNGPaintDevice($mapfilename,$width,$height);
    }

    if (uc $outputformat eq 'IMAP') {
	eval { require PaintDevice::ImageMapPaintDevive; };
	$device=new PaintDevice::ImageMapPaintDevice($mapfilename,$width,$height,$urlprefix);

    }
}

if (uc $outputformat eq 'PS') {
    eval { require PaintDevice::PSPaintDevice; };
    $device=new PaintDevice::PSPaintDevice($mapfilename,18,25);
}

if (uc $outputformat eq 'XFIG') {
    eval { require PaintDevice::XFigPaintDevice; };
    $device=new PaintDevice::XFigPaintDevice($mapfilename,18,10);
}


die "$0: unknown output format $outputformat\n" unless defined $device;


my $mapwidget=new PhysicalMapWidget($device);

$mapwidget->append_map($map,$first,$last,$step);

if (defined $companalresfile) {
    $map->load_companal_results($companalresfile);
}

$mapwidget->render();

__END__

=head1 ImapGenerator

MapGenerator - Generating Maps in Various Output Formats from GenBank Flat Files or Access Numbers

=head1 SAMPLE

MapGenerator --gbkfile=sample.gbk 'http://www.somewhere.org/display_feature.cgi?' sample.map

=head1 SYNOPSIS

MapGenerator [options] mapfile

  Options:
    -h     print this page.
    -a     accessnumber of the GenBank record to be extracted from the database.
    -g     local GenBank formatted file to use for map generation.
    -f     first base of displayed map portion.
    -l     last base of displayed map portion.
    -s     number of bases to display per map line.
    -o     ouput format for generated map. 
    -p     preferences file for MapViewer settings.
    -c     computational analysis file.
    -w     width of resulting image (only valid for bitmapped output files).
    -u     urlprefix for imagemaps.



MapGenerator generates graphical files representing genome maps from
annotated sequence data, either in a GenBank formatted text file, or
from the Micado database given an access number.  Parameters of the
portion of the annotated sequence to be displayed are user-definable,

=head1 OPTIONS

=over

=item B<-h> or B<--help>

Prints this help page.

=item B<-a> or B<--accessnumber>

Defines the GenBank access number to be used to generate the image
map. This functionality relies on a database connection to the Micado
database. It extracts all features and the sequence relative to the
access number and draws them on the image map. This option is mutually
exclusive with the B<-g> option.


=item B<-g> or B<--gbkfile>

Defines the locally available, GenBank-formatted text file containing
the features and sequence to be drawn on the image map. This option is
mutually exclusive with the B<-a> option.


=item B<-c> or B<--companalresfile>

Defines a computational analysis results file to be draw on the map.

=item B<-f> or B<--first>

Position of first base to be displayed.

=item B<-l> or B<--last>

Position of last base to be displayed.

=item B<-s> or B<--step>

Number of bases per displayed line.

=item B<-o> or B<--outputformat>

Graphics format for output file. One of 'PNG', 'IMAP', 'PS' or 'XFIG'.

=item B<-p> or B<--prefsfile>

Name of MapViewer preferences file.

=item B<-c> or B<--companalresfile>

Name of computational analysis file to overlay on map.

Name of MapViewer preferences file.

=item B<-w> or B<--width>

Width in pixels of resulting output image. Only valid for bitmap formats ('PNG' and 'IMAP').

=item B<-u> or B<--urlprefix>

URL prefix used for image maps. Image maps are client side maps where each feature determines a clickable area. The URL pointed by each feature is composed of the URL prefix followed by 3 additionnal parameters : the primary tag of the feature, as value of the tag parameter, the start and end positions of the feature (in base positions) as values of the start and end parameters. Ex, a 'CDS' feature positioned between bases 100 and 200 will give rise to the following map area :
    
    <area shape="rect" coords="<image coordinates>" 
    qhref="<urlprefix>tag=CDS&start=100&end=200">

=back
